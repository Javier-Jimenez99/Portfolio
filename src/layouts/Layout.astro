---
export interface Props {
	title: string;
	description?: string;
}

const { title, description = "Portfolio of Javier Jiménez - Data Scientist & NLP Engineer specialized in GenAI, Large Language Models, and Natural Language Processing" } = Astro.props;
import '../styles/global.css';
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="author" content="Javier Jiménez" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://javier-jimenez99.github.io" />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		
		<link rel="icon" type="image/png" href="/Portfolio/MyEmoji.png" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		
		<script is:inline>
			document.documentElement.classList.toggle(
			  "dark",
			  localStorage.theme === "dark" ||
				(!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)
			);
		</script>
		
		<title>{title}</title>
	</head>
	<body class="font-sans bg-slate-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-300">
		<slot />
		
		<script>
			// Smooth scrolling
			document.querySelectorAll('a[href^="#"]').forEach(anchor => {
				anchor.addEventListener('click', function (e) {
					e.preventDefault();
					const target = document.querySelector(this.getAttribute('href'));
					if (target) {
						target.scrollIntoView({ behavior: 'smooth', block: 'start' });
					}
				});
			});

			// Intersection Observer for animations
			const observer = new IntersectionObserver((entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						entry.target.classList.add('animate-fade-in-up');
					}
				});
			}, { threshold: 0.1, rootMargin: '0px 0px -100px 0px' });

			document.querySelectorAll('section').forEach(section => observer.observe(section));

			// Event handlers
			document.addEventListener('DOMContentLoaded', () => {
				// Dark mode toggle
				const themeToggle = document.getElementById('theme-toggle');
				if (themeToggle) {
					themeToggle.addEventListener('click', () => {
						const isDark = document.documentElement.classList.contains('dark');
						if (isDark) {
							document.documentElement.classList.remove('dark');
							localStorage.theme = 'light';
						} else {
							document.documentElement.classList.add('dark');
							localStorage.theme = 'dark';
						}
					});
				}

				// Mobile menu toggle
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileMenu = document.getElementById('mobile-menu');
				
				if (mobileMenuButton && mobileMenu) {
					mobileMenuButton.addEventListener('click', () => {
						mobileMenu.classList.toggle('hidden');
					});
					
					document.querySelectorAll('.mobile-link').forEach(link => {
						link.addEventListener('click', () => {
							mobileMenu.classList.add('hidden');
						});
					});
				}
			});
		</script>

	</body>
</html>
